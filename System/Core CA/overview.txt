-----------------------------------------------
Needed Functionality
-----------------------------------------------
+ verify user/password
+ verify certificate? for login
+ fetch user data from DB
+ push changes to DB
+ generate key pairs and corresponding certificate
+ revoke certificate and fetch revocation list
+ fetch CA state
+ ssh and ftps connections for administration


-----------------------------------------------
BACKEND
-----------------------------------------------
## Technology ##
+ Openssl (see Chapter 7 of the Book) -> already installed on OS
± Django REST Framework -> djangorestframework python 3 package
+ MySQL -> msqlclient python 3 package


-----------------------------------------------
REST API
-----------------------------------------------
## Possible Technologies ##
+ Django (Python)
+ Flask (Python)
+ Spark (Java)
+ Spring (Java)
+ Rails (Ruby)

## Calls ##

- - - CA - - -
- issue_certificate -> to create a key-pair and corresponding certificate for a user -> POST /certificates TODO
- get_certificate -> to retrieve all certificates of a user -> GET /certificates/<username>
- revoke_certificate -> to revoke one/all certificates of a user -> DELETE /certificates/<username> TODO
- get_revocation_list -> to retrieve the current certificate revocation list -> GET /certificates/revocation_list
- get_number_issued -> ca admin only -> to retrieve the number of issued certificates -> GET /ca/issued
- get_number_revoked -> ca admin only -> to retrieve the number of revoked certificates -> GET /ca/revoked
- get_serial_number -> ca admin only -> to retrieve the current serial number -> GET /ca/serial_number

- - - DB - - -
- verify_username_password -> for user login
POST /users/verify args: {“userPassword”:”<password>”} returns: {“correctCredentials”:<true/false>}


- verify_certificate? -> for user login 


- get_user_info -> to retrieve user information from the db
GET /users/<userid> returns {“last name”:”<lastname>”, "firstname”:”<firstname>”, “emailAddress”:”<emailAddress>”}


- update_user_info -> to update user information in the db
POST /users/<userid> args: {“last name”:”<lastname>”, "firstname”:”<firstname>”, “emailAddress”:”<emailAddress>”}
